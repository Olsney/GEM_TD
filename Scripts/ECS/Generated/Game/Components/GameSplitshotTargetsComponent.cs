//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSplitshotTargets;

    public static Entitas.IMatcher<GameEntity> SplitshotTargets {
        get {
            if (_matcherSplitshotTargets == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SplitshotTargets);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSplitshotTargets = matcher;
            }

            return _matcherSplitshotTargets;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.Battle.SplitShot.SplitshotTargetsComponent splitshotTargets { get { return (Game.Battle.SplitShot.SplitshotTargetsComponent)GetComponent(GameComponentsLookup.SplitshotTargets); } }
    public Game.Battle.SplitShot.Data.TargetDistanceData?[] SplitshotTargets { get { return splitshotTargets.Value; } }
    public bool hasSplitshotTargets { get { return HasComponent(GameComponentsLookup.SplitshotTargets); } }

    public GameEntity AddSplitshotTargets(Game.Battle.SplitShot.Data.TargetDistanceData?[] newValue) {
        var index = GameComponentsLookup.SplitshotTargets;
        var component = (Game.Battle.SplitShot.SplitshotTargetsComponent)CreateComponent(index, typeof(Game.Battle.SplitShot.SplitshotTargetsComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSplitshotTargets(Game.Battle.SplitShot.Data.TargetDistanceData?[] newValue) {
        var index = GameComponentsLookup.SplitshotTargets;
        var component = (Game.Battle.SplitShot.SplitshotTargetsComponent)CreateComponent(index, typeof(Game.Battle.SplitShot.SplitshotTargetsComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSplitshotTargets() {
        RemoveComponent(GameComponentsLookup.SplitshotTargets);
        return this;
    }
}
