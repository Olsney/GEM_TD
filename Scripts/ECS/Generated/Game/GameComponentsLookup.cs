//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int AnyAbilityUsingFinishedEventListener = 0;
    public const int AnySwapSelectionActiveListener = 1;
    public const int AnySwapSelectionDeactivateListener = 2;
    public const int CurrentHealthPointsListener = 3;
    public const int Abilities = 4;
    public const int AbilityEnum = 5;
    public const int AdditionalProjectilesStatus = 6;
    public const int Affected = 7;
    public const int Applied = 8;
    public const int ApplierStatusLink = 9;
    public const int Armament = 10;
    public const int AttackSpeedAuraStatus = 11;
    public const int AttackSpeedStat = 12;
    public const int AttackSpeedStatus = 13;
    public const int AuraAbility = 14;
    public const int BaseStats = 15;
    public const int BasicAbilityId = 16;
    public const int BasicAttackAbility = 17;
    public const int CleaveAbility = 18;
    public const int ReadyToCleave = 19;
    public const int CleaveArmament = 20;
    public const int CleaveArmamentRadius = 21;
    public const int CollectingTargetsContinuously = 22;
    public const int CollectTargetsInterval = 23;
    public const int CollectTargetsTimer = 24;
    public const int Cooldown = 25;
    public const int CooldownLeft = 26;
    public const int CooldownUp = 27;
    public const int DamageEffect = 28;
    public const int DecreaseArmor = 29;
    public const int Direction = 30;
    public const int Duration = 31;
    public const int EAura1Status = 32;
    public const int EAura2Status = 33;
    public const int EAura3Status = 34;
    public const int EAura4Status = 35;
    public const int EAura5Status = 36;
    public const int EAura6Status = 37;
    public const int Effect = 38;
    public const int EffectSetups = 39;
    public const int EffectValue = 40;
    public const int Explosion = 41;
    public const int FollowingProducer = 42;
    public const int Freeze = 43;
    public const int GarlicAuraAbility = 44;
    public const int HealEffect = 45;
    public const int HorizontalRotation = 46;
    public const int LayerMask = 47;
    public const int MovementAvailable = 48;
    public const int MoveSpeedStat = 49;
    public const int MuzzleFlash = 50;
    public const int OrbitingMushroomAbility = 51;
    public const int ParentAbility = 52;
    public const int Period = 53;
    public const int PierceAbility = 54;
    public const int PierceProjectiles = 55;
    public const int PoisonAbility = 56;
    public const int PoisonProjectiles = 57;
    public const int Poison = 58;
    public const int Processed = 59;
    public const int ProcessedTargets = 60;
    public const int ProducerId = 61;
    public const int ProjectilesCountStat = 62;
    public const int Reached = 63;
    public const int ReadyToApplyEffect = 64;
    public const int ReadyToCollectTargets = 65;
    public const int RecreatedOnUpgrade = 66;
    public const int Rotation = 67;
    public const int RotationReady = 68;
    public const int RotationSpeed = 69;
    public const int Scale = 70;
    public const int SlowAbility = 71;
    public const int SlowProjectiles = 72;
    public const int SpeedAbility = 73;
    public const int SplitShotAbility = 74;
    public const int SplitShotTargets = 75;
    public const int StatChange = 76;
    public const int StatModifiers = 77;
    public const int Status = 78;
    public const int StatusSetups = 79;
    public const int StatusTypeId = 80;
    public const int TargetBuffer = 81;
    public const int TargetId = 82;
    public const int TargetLimit = 83;
    public const int TimeLeft = 84;
    public const int TimeSinceLastTick = 85;
    public const int TurnedAlongDirection = 86;
    public const int Unapplied = 87;
    public const int UpgradeRequest = 88;
    public const int VegetableBoltAbility = 89;
    public const int VerticalRotation = 90;
    public const int WorldPosition = 91;
    public const int CameraBounds = 92;
    public const int Camera = 93;
    public const int CameraDrag = 94;
    public const int CameraInput = 95;
    public const int CameraStartPosition = 96;
    public const int CameraTarget = 97;
    public const int CinemachineCamera = 98;
    public const int Ray = 99;
    public const int ZoomState = 100;
    public const int Active = 101;
    public const int Chosen = 102;
    public const int Destructed = 103;
    public const int EntityLink = 104;
    public const int Id = 105;
    public const int Index = 106;
    public const int Level = 107;
    public const int Prefab = 108;
    public const int Radius = 109;
    public const int SelfDestructTimer = 110;
    public const int View = 111;
    public const int ViewId = 112;
    public const int Cursor = 113;
    public const int CursorPosition = 114;
    public const int Age = 115;
    public const int Enemy = 116;
    public const int EnemyFrag = 117;
    public const int EnemyFragCreated = 118;
    public const int Flyable = 119;
    public const int PathNumber = 120;
    public const int TargetPlaceIndex = 121;
    public const int TargetPointWorldPosition = 122;
    public const int EnemySpawned = 123;
    public const int GameLoopStateEnum = 124;
    public const int GameMain = 125;
    public const int TotalGameTime = 126;
    public const int Highlighted = 127;
    public const int Human = 128;
    public const int AxisInput = 129;
    public const int LeftMouseButtonClick = 130;
    public const int UserInput = 131;
    public const int EnemiesKilled = 132;
    public const int EnemiesPerRound = 133;
    public const int RoundComplete = 134;
    public const int Armor = 135;
    public const int CurrentHealthPoints = 136;
    public const int Dead = 137;
    public const int MaxHealthPoints = 138;
    public const int ProcessingDeath = 139;
    public const int Block = 140;
    public const int CheckPoint = 141;
    public const int DistanceToCenter = 142;
    public const int FinishPoint = 143;
    public const int MazePosition = 144;
    public const int StartPoint = 145;
    public const int Wall = 146;
    public const int Gold = 147;
    public const int AbilityUsingFinishedEvent = 148;
    public const int PlayerSwapAbility = 149;
    public const int HealThroneCostInGold = 150;
    public const int HealThroneRequest = 151;
    public const int HealThroneValue = 152;
    public const int PlayerHealThroneAbility = 153;
    public const int Clicked = 154;
    public const int ConfirmSwapWindowData = 155;
    public const int Swapable = 156;
    public const int SwapCostInGold = 157;
    public const int SwapFinishRequest = 158;
    public const int SwapFirstTowerSelected = 159;
    public const int SwapRequest = 160;
    public const int SwapSecondTowerSelected = 161;
    public const int SwapSelectionActive = 162;
    public const int SwapSelectionDeactivate = 163;
    public const int PlayerTimeLapseAbility = 164;
    public const int TimeLapseCostInGold = 165;
    public const int TimeLapseRequest = 166;
    public const int Player = 167;
    public const int PlayerId = 168;
    public const int PortraitCamera = 169;
    public const int PortraitTarget = 170;
    public const int CanRaycast = 171;
    public const int Raycasting = 172;
    public const int ReadyToSwitchState = 173;
    public const int Round = 174;
    public const int RoundTimer = 175;
    public const int CancelSelectionRequest = 176;
    public const int Selected = 177;
    public const int SpiritPlaced = 178;
    public const int Timer = 179;
    public const int AttackCooldown = 180;
    public const int AttackRange = 181;
    public const int AttackTimer = 182;
    public const int BasicAttack = 183;
    public const int Dummy = 184;
    public const int CollectingMergeVariants = 185;
    public const int FilteringMergeVariants = 186;
    public const int Merge = 187;
    public const int MergeRequest = 188;
    public const int MergeResult = 189;
    public const int MergeVariants = 190;
    public const int RotateAlongEnemyPosition = 191;
    public const int RequestSpiritSelect = 192;
    public const int ShootingPointWorldPosition = 193;
    public const int Speed = 194;
    public const int SplitshotAttack = 195;
    public const int Target = 196;
    public const int Tower = 197;
    public const int TowerEnum = 198;
    public const int TowerId = 199;
    public const int TowerSpirit = 200;
    public const int GameLoopStateEnumListener = 201;
    public const int GoldListener = 202;
    public const int HighlightedListener = 203;
    public const int HighlightedRemovedListener = 204;
    public const int LevelListener = 205;
    public const int ProcessingDeathRemovedListener = 206;
    public const int RotationListener = 207;
    public const int RoundListener = 208;
    public const int RoundTimerListener = 209;
    public const int ScaleListener = 210;
    public const int SelectedListener = 211;
    public const int SelectedRemovedListener = 212;
    public const int TotalGameTimeListener = 213;
    public const int WorldPositionListener = 214;

    public const int TotalComponents = 215;

    public static readonly string[] componentNames = {
        "AnyAbilityUsingFinishedEventListener",
        "AnySwapSelectionActiveListener",
        "AnySwapSelectionDeactivateListener",
        "CurrentHealthPointsListener",
        "Abilities",
        "AbilityEnum",
        "AdditionalProjectilesStatus",
        "Affected",
        "Applied",
        "ApplierStatusLink",
        "Armament",
        "AttackSpeedAuraStatus",
        "AttackSpeedStat",
        "AttackSpeedStatus",
        "AuraAbility",
        "BaseStats",
        "BasicAbilityId",
        "BasicAttackAbility",
        "CleaveAbility",
        "ReadyToCleave",
        "CleaveArmament",
        "CleaveArmamentRadius",
        "CollectingTargetsContinuously",
        "CollectTargetsInterval",
        "CollectTargetsTimer",
        "Cooldown",
        "CooldownLeft",
        "CooldownUp",
        "DamageEffect",
        "DecreaseArmor",
        "Direction",
        "Duration",
        "EAura1Status",
        "EAura2Status",
        "EAura3Status",
        "EAura4Status",
        "EAura5Status",
        "EAura6Status",
        "Effect",
        "EffectSetups",
        "EffectValue",
        "Explosion",
        "FollowingProducer",
        "Freeze",
        "GarlicAuraAbility",
        "HealEffect",
        "HorizontalRotation",
        "LayerMask",
        "MovementAvailable",
        "MoveSpeedStat",
        "MuzzleFlash",
        "OrbitingMushroomAbility",
        "ParentAbility",
        "Period",
        "PierceAbility",
        "PierceProjectiles",
        "PoisonAbility",
        "PoisonProjectiles",
        "Poison",
        "Processed",
        "ProcessedTargets",
        "ProducerId",
        "ProjectilesCountStat",
        "Reached",
        "ReadyToApplyEffect",
        "ReadyToCollectTargets",
        "RecreatedOnUpgrade",
        "Rotation",
        "RotationReady",
        "RotationSpeed",
        "Scale",
        "SlowAbility",
        "SlowProjectiles",
        "SpeedAbility",
        "SplitShotAbility",
        "SplitShotTargets",
        "StatChange",
        "StatModifiers",
        "Status",
        "StatusSetups",
        "StatusTypeId",
        "TargetBuffer",
        "TargetId",
        "TargetLimit",
        "TimeLeft",
        "TimeSinceLastTick",
        "TurnedAlongDirection",
        "Unapplied",
        "UpgradeRequest",
        "VegetableBoltAbility",
        "VerticalRotation",
        "WorldPosition",
        "CameraBounds",
        "Camera",
        "CameraDrag",
        "CameraInput",
        "CameraStartPosition",
        "CameraTarget",
        "CinemachineCamera",
        "Ray",
        "ZoomState",
        "Active",
        "Chosen",
        "Destructed",
        "EntityLink",
        "Id",
        "Index",
        "Level",
        "Prefab",
        "Radius",
        "SelfDestructTimer",
        "View",
        "ViewId",
        "Cursor",
        "CursorPosition",
        "Age",
        "Enemy",
        "EnemyFrag",
        "EnemyFragCreated",
        "Flyable",
        "PathNumber",
        "TargetPlaceIndex",
        "TargetPointWorldPosition",
        "EnemySpawned",
        "GameLoopStateEnum",
        "GameMain",
        "TotalGameTime",
        "Highlighted",
        "Human",
        "AxisInput",
        "LeftMouseButtonClick",
        "UserInput",
        "EnemiesKilled",
        "EnemiesPerRound",
        "RoundComplete",
        "Armor",
        "CurrentHealthPoints",
        "Dead",
        "MaxHealthPoints",
        "ProcessingDeath",
        "Block",
        "CheckPoint",
        "DistanceToCenter",
        "FinishPoint",
        "MazePosition",
        "StartPoint",
        "Wall",
        "Gold",
        "AbilityUsingFinishedEvent",
        "PlayerSwapAbility",
        "HealThroneCostInGold",
        "HealThroneRequest",
        "HealThroneValue",
        "PlayerHealThroneAbility",
        "Clicked",
        "ConfirmSwapWindowData",
        "Swapable",
        "SwapCostInGold",
        "SwapFinishRequest",
        "SwapFirstTowerSelected",
        "SwapRequest",
        "SwapSecondTowerSelected",
        "SwapSelectionActive",
        "SwapSelectionDeactivate",
        "PlayerTimeLapseAbility",
        "TimeLapseCostInGold",
        "TimeLapseRequest",
        "Player",
        "PlayerId",
        "PortraitCamera",
        "PortraitTarget",
        "CanRaycast",
        "Raycasting",
        "ReadyToSwitchState",
        "Round",
        "RoundTimer",
        "CancelSelectionRequest",
        "Selected",
        "SpiritPlaced",
        "Timer",
        "AttackCooldown",
        "AttackRange",
        "AttackTimer",
        "BasicAttack",
        "Dummy",
        "CollectingMergeVariants",
        "FilteringMergeVariants",
        "Merge",
        "MergeRequest",
        "MergeResult",
        "MergeVariants",
        "RotateAlongEnemyPosition",
        "RequestSpiritSelect",
        "ShootingPointWorldPosition",
        "Speed",
        "SplitshotAttack",
        "Target",
        "Tower",
        "TowerEnum",
        "TowerId",
        "TowerSpirit",
        "GameLoopStateEnumListener",
        "GoldListener",
        "HighlightedListener",
        "HighlightedRemovedListener",
        "LevelListener",
        "ProcessingDeathRemovedListener",
        "RotationListener",
        "RoundListener",
        "RoundTimerListener",
        "ScaleListener",
        "SelectedListener",
        "SelectedRemovedListener",
        "TotalGameTimeListener",
        "WorldPositionListener"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(AnyAbilityUsingFinishedEventListenerComponent),
        typeof(AnySwapSelectionActiveListenerComponent),
        typeof(AnySwapSelectionDeactivateListenerComponent),
        typeof(CurrentHealthPointsListenerComponent),
        typeof(Game.Battle.AbilitiesComponent),
        typeof(Game.Battle.AbilityEnumComponent),
        typeof(Game.Battle.AdditionalProjectilesStatusComponent),
        typeof(Game.Battle.AffectedComponent),
        typeof(Game.Battle.AppliedComponent),
        typeof(Game.Battle.ApplierStatusLinkComponent),
        typeof(Game.Battle.ArmamentComponent),
        typeof(Game.Battle.AttackSpeedAuraStatusComponent),
        typeof(Game.Battle.AttackSpeedStatComponent),
        typeof(Game.Battle.AttackSpeedStatusComponent),
        typeof(Game.Battle.AuraAbility.Comps.AuraAbilityComponent),
        typeof(Game.Battle.BaseStatsComponent),
        typeof(Game.Battle.BasicAbilityIdComponent),
        typeof(Game.Battle.BasicAttack.BasicAttackAbilityComponent),
        typeof(Game.Battle.CleaveAbility.Comps.CleaveAbilityComponent),
        typeof(Game.Battle.CleaveAbility.Comps.ReadyToCleaveComponent),
        typeof(Game.Battle.CleaveArmamentComponent),
        typeof(Game.Battle.CleaveArmamentRadiusComponent),
        typeof(Game.Battle.CollectingTargetsContinuouslyComponent),
        typeof(Game.Battle.CollectTargetsIntervalComponent),
        typeof(Game.Battle.CollectTargetsTimerComponent),
        typeof(Game.Battle.CooldownComponent),
        typeof(Game.Battle.CooldownLeftComponent),
        typeof(Game.Battle.CooldownUpComponent),
        typeof(Game.Battle.DamageEffectComponent),
        typeof(Game.Battle.DecreaseArmorComponent),
        typeof(Game.Battle.DirectionComponent),
        typeof(Game.Battle.DurationComponent),
        typeof(Game.Battle.EAura1StatusComponent),
        typeof(Game.Battle.EAura2StatusComponent),
        typeof(Game.Battle.EAura3StatusComponent),
        typeof(Game.Battle.EAura4StatusComponent),
        typeof(Game.Battle.EAura5StatusComponent),
        typeof(Game.Battle.EAura6StatusComponent),
        typeof(Game.Battle.EffectComponent),
        typeof(Game.Battle.EffectSetupsComponent),
        typeof(Game.Battle.EffectValueComponent),
        typeof(Game.Battle.ExplosionComponent),
        typeof(Game.Battle.FollowingProducerComponent),
        typeof(Game.Battle.FreezeComponent),
        typeof(Game.Battle.GarlicAuraAbilityComponent),
        typeof(Game.Battle.HealEffectComponent),
        typeof(Game.Battle.HorizontalRotationComponent),
        typeof(Game.Battle.LayerMaskComponent),
        typeof(Game.Battle.MovementAvailable),
        typeof(Game.Battle.MoveSpeedStatComponent),
        typeof(Game.Battle.MuzzleFlashComponent),
        typeof(Game.Battle.OrbitingMushroomAbilityComponent),
        typeof(Game.Battle.ParentAbilityComponent),
        typeof(Game.Battle.PeriodComponent),
        typeof(Game.Battle.PierceAbility.Comps.PierceAbilityComponent),
        typeof(Game.Battle.PierceAbility.Comps.PierceProjectilesComponent),
        typeof(Game.Battle.PoisonAbility.Comps.PoisonAbilityComponent),
        typeof(Game.Battle.PoisonAbility.Comps.PoisonProjectilesComponent),
        typeof(Game.Battle.PoisonComponent),
        typeof(Game.Battle.ProcessedComponent),
        typeof(Game.Battle.ProcessedTargetsComponent),
        typeof(Game.Battle.ProducerIdComponent),
        typeof(Game.Battle.ProjectilesCountStatComponent),
        typeof(Game.Battle.ReachedComponent),
        typeof(Game.Battle.ReadyToApplyEffectComponent),
        typeof(Game.Battle.ReadyToCollectTargets),
        typeof(Game.Battle.RecreatedOnUpgradeComponent),
        typeof(Game.Battle.RotationComponent),
        typeof(Game.Battle.RotationReadyComponent),
        typeof(Game.Battle.RotationSpeedComponent),
        typeof(Game.Battle.ScaleComponent),
        typeof(Game.Battle.SlowAbility.Comps.SlowAbilityComponent),
        typeof(Game.Battle.SlowAbility.Comps.SlowProjectilesComponent),
        typeof(Game.Battle.SpeedAbility.Comps.SpeedAbilityComponent),
        typeof(Game.Battle.SplitShot.SplitShotAbilityComponent),
        typeof(Game.Battle.SplitShot.SplitShotTargetsComponent),
        typeof(Game.Battle.StatChangeComponent),
        typeof(Game.Battle.StatModifiersComponent),
        typeof(Game.Battle.StatusComponent),
        typeof(Game.Battle.StatusSetupsComponent),
        typeof(Game.Battle.StatusTypeIdComponent),
        typeof(Game.Battle.TargetBufferComponent),
        typeof(Game.Battle.TargetIdComponent),
        typeof(Game.Battle.TargetLimitComponent),
        typeof(Game.Battle.TimeLeftComponent),
        typeof(Game.Battle.TimeSinceLastTickComponent),
        typeof(Game.Battle.TurnedAlongDirectionComponent),
        typeof(Game.Battle.UnappliedComponent),
        typeof(Game.Battle.UpgradeRequestComponent),
        typeof(Game.Battle.VegetableBoltAbilityComponent),
        typeof(Game.Battle.VerticalRotationComponent),
        typeof(Game.Battle.WorldPositionComponent),
        typeof(Game.Cameras.CameraBounds),
        typeof(Game.Cameras.CameraComponent),
        typeof(Game.Cameras.CameraDragComponent),
        typeof(Game.Cameras.CameraInputComponent),
        typeof(Game.Cameras.CameraStartPositionComponent),
        typeof(Game.Cameras.CameraTargetComponent),
        typeof(Game.Cameras.CinemachineCameraComponent),
        typeof(Game.Cameras.RayComponent),
        typeof(Game.Cameras.ZoomStateComponent),
        typeof(Game.CommonComponents.ActiveComponent),
        typeof(Game.CommonComponents.ChosenComponent),
        typeof(Game.CommonComponents.DestructedComponent),
        typeof(Game.CommonComponents.EntityLinkComponent),
        typeof(Game.CommonComponents.IdComponent),
        typeof(Game.CommonComponents.IndexComponent),
        typeof(Game.CommonComponents.LevelComponent),
        typeof(Game.CommonComponents.PrefabComponent),
        typeof(Game.CommonComponents.RadiusComponent),
        typeof(Game.CommonComponents.SelfDestructTimerComponent),
        typeof(Game.CommonComponents.ViewComponent),
        typeof(Game.CommonComponents.ViewIdComponent),
        typeof(Game.Cursor.CursorComponent),
        typeof(Game.Cursor.CursorPositionComponent),
        typeof(Game.Enemies.AgeComponent),
        typeof(Game.Enemies.EnemyComponent),
        typeof(Game.Enemies.EnemyFragComponent),
        typeof(Game.Enemies.EnemyFragCreatedComponent),
        typeof(Game.Enemies.FlyableComponent),
        typeof(Game.Enemies.PathNumberComponent),
        typeof(Game.Enemies.TargetPlaceIndexComponent),
        typeof(Game.Enemies.TargetPointWorldPositionComponent),
        typeof(Game.EnemySpawnedComponent),
        typeof(Game.GameLoopStateEnumComponent),
        typeof(Game.GameMainFeature.GameMainComponent),
        typeof(Game.GameMainFeature.TotalGameTimeComponent),
        typeof(Game.Highlight.HighlightedComponent),
        typeof(Game.HumanComponent),
        typeof(Game.Inputs.AxisInputComponent),
        typeof(Game.Inputs.LeftMouseButtonClickComponent),
        typeof(Game.Inputs.UserInputComponent),
        typeof(Game.KillEnemy.EnemiesKilledComponent),
        typeof(Game.KillEnemy.EnemiesPerRoundComponent),
        typeof(Game.KillEnemy.RoundCompleteComponent),
        typeof(Game.Lifetime.ArmorComponent),
        typeof(Game.Lifetime.CurrentHealthPointsComponent),
        typeof(Game.Lifetime.DeadComponent),
        typeof(Game.Lifetime.MaxHealthPointsComponent),
        typeof(Game.Lifetime.ProcessingDeathComponent),
        typeof(Game.Maze.BlockComponent),
        typeof(Game.Maze.CheckPointComponent),
        typeof(Game.Maze.DistanceToCenterComponent),
        typeof(Game.Maze.FinishPointComponent),
        typeof(Game.Maze.MazePositionComponent),
        typeof(Game.Maze.StartPointComponent),
        typeof(Game.Maze.WallComponent),
        typeof(Game.Meta.GoldComponent),
        typeof(Game.PlayerAbility.Comps.AbilityUsingFinishedEventComponent),
        typeof(Game.PlayerAbility.Comps.PlayerSwapAbilityComponent),
        typeof(Game.PlayerAbility.HealThroneAbility.Comps.HealThroneCostInGoldComponent),
        typeof(Game.PlayerAbility.HealThroneAbility.Comps.HealThroneRequestComponent),
        typeof(Game.PlayerAbility.HealThroneAbility.Comps.HealThroneValue),
        typeof(Game.PlayerAbility.HealThroneAbility.Comps.PlayerHealThroneAbilityComponent),
        typeof(Game.PlayerAbility.SwapAbility.Comps.ClickedComponent),
        typeof(Game.PlayerAbility.SwapAbility.Comps.Game.PlayerAbility.SwapAbility.Comps.ConfirmSwapWindowDataComponent),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapableComponent),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapCostInGoldComponent),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapFinishRequest),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapFirstTowerSelected),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapRequestComponent),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapSecondTowerSelected),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapSelectionActive),
        typeof(Game.PlayerAbility.SwapAbility.Comps.SwapSelectionDeactivate),
        typeof(Game.PlayerAbility.TimeLapseAbility.Comps.PlayerTimeLapseAbilityComponent),
        typeof(Game.PlayerAbility.TimeLapseAbility.Comps.TimeLapseCostInGoldComponent),
        typeof(Game.PlayerAbility.TimeLapseAbility.Comps.TimeLapseRequestComponent),
        typeof(Game.PlayerComponent),
        typeof(Game.PlayerIdComponent),
        typeof(Game.PortraitCameras.PortraitCameraComponent),
        typeof(Game.PortraitCameras.PortraitTargetComponent),
        typeof(Game.Raycast.CanRaycastComponent),
        typeof(Game.Raycast.RaycastingComponent),
        typeof(Game.ReadyToSwitchStateComponent),
        typeof(Game.RoundComponent),
        typeof(Game.RoundTimerComponent),
        typeof(Game.Selection.Comps.CancelSelectionRequest),
        typeof(Game.Selection.SelectedComponent),
        typeof(Game.SpiritPlacedComponent),
        typeof(Game.Timers.TimerComponent),
        typeof(Game.Towers.AttackCooldownComponent),
        typeof(Game.Towers.AttackRangeComponent),
        typeof(Game.Towers.AttackTimerComponent),
        typeof(Game.Towers.BasicAttackComponent),
        typeof(Game.Towers.DummyComponent),
        typeof(Game.Towers.MergeSpirits.Comps.CollectingMergeVariantsComponent),
        typeof(Game.Towers.MergeSpirits.Comps.FilteringMergeVariantsComponent),
        typeof(Game.Towers.MergeSpirits.Comps.MergeComponent),
        typeof(Game.Towers.MergeSpirits.Comps.MergeRequestComponent),
        typeof(Game.Towers.MergeSpirits.Comps.MergeResultComponent),
        typeof(Game.Towers.MergeSpirits.Comps.MergeVariantsComponent),
        typeof(Game.Towers.RotateAlongEnemyPositionComponent),
        typeof(Game.Towers.SelectSpirits.Comps.RequestSpiritSelectComponent),
        typeof(Game.Towers.ShootingPointWorldPositionComponent),
        typeof(Game.Towers.SpeedComponent),
        typeof(Game.Towers.SplitshotAttackComponent),
        typeof(Game.Towers.TargetComponent),
        typeof(Game.Towers.TowerComponent),
        typeof(Game.Towers.TowerEnumComponent),
        typeof(Game.Towers.TowerIdComponent),
        typeof(Game.Towers.TowerSpiritComponent),
        typeof(GameLoopStateEnumListenerComponent),
        typeof(GoldListenerComponent),
        typeof(HighlightedListenerComponent),
        typeof(HighlightedRemovedListenerComponent),
        typeof(LevelListenerComponent),
        typeof(ProcessingDeathRemovedListenerComponent),
        typeof(RotationListenerComponent),
        typeof(RoundListenerComponent),
        typeof(RoundTimerListenerComponent),
        typeof(ScaleListenerComponent),
        typeof(SelectedListenerComponent),
        typeof(SelectedRemovedListenerComponent),
        typeof(TotalGameTimeListenerComponent),
        typeof(WorldPositionListenerComponent)
    };
}
